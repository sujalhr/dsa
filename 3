
#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#define MAX 3
int s[MAX];
int top = -1;

void push(int item);
int pop();
bool palindrome();
void display();
bool isFull();
bool isEmpty();

void main() {
    int choice, item;
    while (1) {
        printf("\n\n\n\n~~~~~~Menu~~~~~~ : ");
        printf("\n1.Push an Element to Stack and check Overflow  ");
        printf("\n2.Pop an Element from Stack and check Underflow ");
        printf("\n3.Palindrome ");
        printf("\n4.Display ");
        printf("\n5.Exit");
        printf("\nEnter your choice: ");
        scanf("%d", & choice);
        switch (choice) {
            case 1:
                printf("\nEnter an element to be pushed: ");
                scanf("%d", & item);
                push(item);
                break;
            case 2:
                item = pop();
                if (item != -1)
                    printf("\nElement popped is: %d", item);
                break;
            case 3:
                palindrome();
                break;
            case 4:
                display();
                break;
            case 5:
                exit(1);
            default:
                printf("\nPlease enter valid choice ");
                break;
        }
    }
}

void push(int item) {
    if (top == MAX - 1) {
        printf("\n~~~~Stack overflow~~~~");
        return;
    }
    top = top + 1;
    s[top] = item;
}

int pop() {
    int item;
    if (top == -1) {
        printf("\n~~~~Stack underflow~~~~");
        return -1;
    }
    item = s[top];
    top = top - 1;
    return item;
}

void display() {
    int i;
    if (top == -1) {
        printf("\n~~~~Stack is empty~~~~");
        return;
    }
    printf("\nStack elements are:\n ");
    for (i = top; i >= 0; i--)
        printf("| %d |\n", s[i]);
}

bool palindrome() {
    if (isEmpty()) {
        printf("Stack is empty. Cannot check palindrome.\n");
        return false;
    }

    int i, j;
    for (i = 0, j = top; i < j; i++, j--) {
        if (s[i] != s[j]) {
            return false;
        }
    }
    return true;
}

bool isFull() {
    return top == MAX - 1;
}

bool isEmpty() {
    return top == -1;
}
